<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    AjaxMin.resx
    
    Copyright 2010 Microsoft Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="UnknownScopeType" xml:space="preserve">
    <value>UNKNOWN SCOPE TYPE;;Unknown Scope Type: {0}</value>
  </data>
  <data name="FallbackEncodingFailed" xml:space="preserve">
    <value>Fallback character encoding failed</value>
  </data>
  <data name="BlockScopeHeader" xml:space="preserve">
    <value>Scope Start;;{0} Scope - starts at line {1}, col {2} {3}</value>
  </data>
  <data name="BlockTypeCatch" xml:space="preserve">
    <value>Catch</value>
  </data>
  <data name="BlockTypeWith" xml:space="preserve">
    <value>With</value>
  </data>
  <data name="CrunchedTo" xml:space="preserve">
    <value>Renamed;;[{1} references renamed to {0}]</value>
  </data>
  <data name="CrunchingFile" xml:space="preserve">
    <value>Minifying file...;;Minifying file '{0}'...</value>
  </data>
  <data name="CrunchingStdIn" xml:space="preserve">
    <value>Minifying from STDIN...</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done.</value>
  </data>
  <data name="FuncitonScopeHasNoObject" xml:space="preserve">
    <value>Function scope must have function object</value>
  </data>
  <data name="FunctionHeader" xml:space="preserve">
    <value>Function;;{0} {1} - starts at line {2}, col {3} {4} {5}</value>
  </data>
  <data name="FunctionTypeFunction" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="FunctionTypePropGet" xml:space="preserve">
    <value>Property Get</value>
  </data>
  <data name="FunctionTypePropSet" xml:space="preserve">
    <value>Property Set</value>
  </data>
  <data name="GlobalObjectsHeader" xml:space="preserve">
    <value>Global Objects</value>
  </data>
  <data name="InvalidArgument" xml:space="preserve">
    <value>Invalid Switch;;Invalid switch: {0}</value>
  </data>
  <data name="InvalidInputEncoding" xml:space="preserve">
    <value>Invalid input encoding name;;Invalid input encoding name: {0}</value>
  </data>
  <data name="InvalidOutputEncoding" xml:space="preserve">
    <value>Invalid output encoding name;;Invalid output encoding name: {0}</value>
  </data>
  <data name="InvalidWarningArg" xml:space="preserve">
    <value>Invalid warning level;;invalid warning level: {0}</value>
  </data>
  <data name="MalformedGlobalsArg" xml:space="preserve">
    <value>-GLOBAL parameter expects format: -GLOBAL:g[,g]*</value>
  </data>
  <data name="MemberInfoFormat" xml:space="preserve">
    <value>Member Info;;  {0} [{1}{2}] {3}</value>
  </data>
  <data name="MemberInfoGlobalFunction" xml:space="preserve">
    <value>global function</value>
  </data>
  <data name="MemberInfoBuiltInMethod" xml:space="preserve">
    <value>function</value>
  </data>
  <data name="MemberInfoBuiltInObject" xml:space="preserve">
    <value>object</value>
  </data>
  <data name="MemberInfoBuiltInProperty" xml:space="preserve">
    <value>property</value>
  </data>
  <data name="MemberInfoGlobalVar" xml:space="preserve">
    <value>global var</value>
  </data>
  <data name="MemberInfoLocalFunction" xml:space="preserve">
    <value>function</value>
  </data>
  <data name="MemberInfoLocalLiteral" xml:space="preserve">
    <value>literal var</value>
  </data>
  <data name="MemberInfoLocalVar" xml:space="preserve">
    <value>var</value>
  </data>
  <data name="MemberInfoPossiblyUndefined" xml:space="preserve">
    <value>possibly undefined</value>
  </data>
  <data name="MemberInfoScopeLocal" xml:space="preserve">
    <value>local </value>
  </data>
  <data name="MemberInfoScopeOuter" xml:space="preserve">
    <value>outer </value>
  </data>
  <data name="MemberInfoScopeGlobalObject" xml:space="preserve">
    <value>built-in Global </value>
  </data>
  <data name="MemberInfoScopeWindowObject" xml:space="preserve">
    <value>built-in Window </value>
  </data>
  <data name="MemberInfoScopeOtherObject" xml:space="preserve">
    <value>built-in </value>
  </data>
  <data name="MemberInfoTypeArgument" xml:space="preserve">
    <value>argument</value>
  </data>
  <data name="MemberInfoTypeArguments" xml:space="preserve">
    <value>arguments array</value>
  </data>
  <data name="MultipleOutputArg" xml:space="preserve">
    <value>Output file already specified</value>
  </data>
  <data name="NoParsedCode" xml:space="preserve">
    <value>No parsed code block</value>
  </data>
  <data name="NotKnown" xml:space="preserve">
    <value>NOT KNOWN</value>
  </data>
  <data name="OutputArgNeedsPath" xml:space="preserve">
    <value>-O parameter must be followed by output path</value>
  </data>
  <data name="OutputEmpty" xml:space="preserve">
    <value>Minified output is EMPTY!</value>
  </data>
  <data name="Severity0" xml:space="preserve">
    <value>run-time</value>
  </data>
  <data name="Severity1" xml:space="preserve">
    <value>coding</value>
  </data>
  <data name="Severity2" xml:space="preserve">
    <value>code</value>
  </data>
  <data name="Severity3" xml:space="preserve">
    <value>performance</value>
  </data>
  <data name="Severity4" xml:space="preserve">
    <value>improper technique</value>
  </data>
  <data name="SeverityUnknown" xml:space="preserve">
    <value>unknown;;unknown ({0})</value>
  </data>
  <data name="SourceFileIsFolder" xml:space="preserve">
    <value>Source file is a folder;;Source file cannot be a folder: {0}</value>
  </data>
  <data name="SourceFileNotExist" xml:space="preserve">
    <value>Source file does not exist;;Source file does not exist: {0}</value>
  </data>
  <data name="UndefinedGlobalHeader" xml:space="preserve">
    <value>Undefined Global References:</value>
  </data>
  <data name="UndefinedInfo" xml:space="preserve">
    <value>Undefined Info;;  {0} [{3}] at Line {1}, Column {2}</value>
  </data>
  <data name="UnexpectedArg" xml:space="preserve">
    <value>Unexpected Argument;;Unexpected argument: {0}</value>
  </data>
  <data name="Unreachable" xml:space="preserve">
    <value>UNREACHABLE</value>
  </data>
  <data name="InvalidTabSizeArg" xml:space="preserve">
    <value>Invalid Tab Size;;Invalid Tab Size: {0}</value>
  </data>
  <data name="PrettyAndEchoArgs" xml:space="preserve">
    <value>Pretty-print (-PRETTY) and Echo-input (-ECHO) switches are not compatible</value>
  </data>
  <data name="CrunchGroupNoSource" xml:space="preserve">
    <value>No source files in the input group</value>
  </data>
  <data name="InputNoPathAttr" xml:space="preserve">
    <value>XML &lt;input&gt; node missing required path attribute</value>
  </data>
  <data name="InputXmlError" xml:space="preserve">
    <value>Error processing input XML;;Error processing input XML: {0}</value>
  </data>
  <data name="MultipleXmlArgs" xml:space="preserve">
    <value>Cannot specify multiple -XML arguments</value>
  </data>
  <data name="NoInput" xml:space="preserve">
    <value>No input files to process</value>
  </data>
  <data name="OutputFileError" xml:space="preserve">
    <value>Output file returned error;;Output file returned an error code: {0}</value>
  </data>
  <data name="OutputGroupError" xml:space="preserve">
    <value>Output group returned error;;Output group #{0} returned an error code: {1}</value>
  </data>
  <data name="OutputNoInputNodes" xml:space="preserve">
    <value>Output node contains no input nodes</value>
  </data>
  <data name="XmlArgHasInputFiles" xml:space="preserve">
    <value>Cannot specify -XML argument AND input files</value>
  </data>
  <data name="XmlArgNeedsPath" xml:space="preserve">
    <value>Argument -XML must be followed by XML file path</value>
  </data>
  <data name="XmlInputNotExist" xml:space="preserve">
    <value>XML &lt;input&gt; file does not exist;;XML error: &lt;input&gt; file '{0}' does not exist</value>
  </data>
  <data name="XmlNoOutputNodes" xml:space="preserve">
    <value>Input xml does not contain any &lt;output&gt; nodes</value>
  </data>
  <data name="InvalidSwitchArg" xml:space="preserve">
    <value>Invalid switch argument;;Invalid switch argument {0} for switch -{1}</value>
  </data>
  <data name="SwitchRequiresArg" xml:space="preserve">
    <value>Switch requires argument;;Switch -{0} requires an argument</value>
  </data>
  <data name="EncodingArgMustHaveEncoding" xml:space="preserve">
    <value>Encoding switch must be followed by valid encoding name</value>
  </data>
  <data name="ResourceArgInvalidName" xml:space="preserve">
    <value>Resource argument must be valid boolean or numeric literal;;Resource argument '{0}' must be valid boolean or numeric literal</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage;;Usage:
{0} [-JS [JSOPTS]|-CSS [CSSOPTS]] OPTS* ((IFILE* [-out OFILE])|(-xml XFILE [-out ODIR]))

Valid OPTS are zero or more of:
  -analyze &gt; provide extra analysis output.
  -clobber[:BOOL] &gt; when false, will not overwrite existing output file.
        True always writes output file. Default is false.
  -echo &gt; output is an echo of the original input.
  -enc:(in|out) ENC &gt; input or output file text encoding.
  -help &gt; display this usage message.
  -pretty[:N] &gt; causes output to be on multiple lines, with N spaces per tab
        stop. Default N is 4.
  -res[:IDENT] RFILE &gt; use a resource file to specify localization strings
        using non-existent object IDENT, Strings if not specified.
  -silent &gt; silent mode; no error, warning, or message output.
  -term &gt; ensure output ends in semicolon or other valid terminator.
  -warn[:N] &gt; warning level for error messages sent to stderr.
  -? &gt; same as -help.
  
Valid JSOPTS are zero or more of:
  -debug[:BOOL] &gt; debug mode does not remove debug statements or function
        expression names. Default is False.
  -evals:(ignore|immediate|safeall) &gt; ignore eval statements or ensure that
        that the immediate scope is safe, or all possibly-affected scopes are 
        safe. Default is ignore.
  -fnames:(lock|keep|onlyref) &gt; how to treat function names. Lock does not 
        allow ANY function names to be removed or renamed; keep does not remove
        unreferenced function expression names, but does allow functions to be 
        renamed; onlyref removes unreferenced function expression names and 
        allows all function names to be renamed. Default is onlyref.
  -global:IDENT(,IDENT)* &gt; specify one or more external global variables the
        code references.
  -inline[:BOOL] &gt; whether to make sure strings are safe for HTML inline 
        script. Default is True.
  -literals:(keep|combine) &gt; whether to combine duplicate literals or keep 
        them. Default is keep.
  -mac[:BOOL] &gt; whether to add code to ensure output works in Mac Safari
        browsers. Default is True.
  -new:(keep|collapse) &gt; whether to collapse certain constructors with known
        literals. Default is collapse.
  -rename:(all|localization|none) &gt; local variable and function renaming 
        method; default is all. Default is all.
  -unused:(remove|keep) &gt; whether to keep or remove unused code. Default
        is remove.

Valid CSSOPTS are zero or more of:
  -comments:(none|all|hacks|important) &gt; whether to keep all comments, 
        remove all, keep only the set of supported comment-based hacks, or
        keep only important comments. Default is important.
  -colors:(hex|strict|major) &gt; how to treat color names: always convert to
        hexadecimal values, use strict color names if shorter, or use major-
        browser color names if shorter. Default is strict.

BOOL can be true, false, T, F, Yes, No, Y, or N.
N is a valid non-negative integer.
IDENT is a valid JavaScript identifier (case-sensitive).
ENC is a valid .NET text encoding scheme name (e.g.: UTF-8).
IFILE is a valid path to an existing source file.
OFILE is a valid path to the output file. Existing files will be clobbered
        if the -CLOBBER option is specified.
XFILE is a valid path to an existing XML input file.
ODIR is a valid path to an output folder.
RFILE is a valid path to an existing .RESX or .RESOURCES file.

XML Format (XML element names and attributes are case-sensitive):
    &lt;root&gt;
      &lt;output path="[OFILE]"&gt;
        &lt;resource path="[RFILE]" name="[IDENT]"/&gt;
        &lt;input path="[IFILE]"/&gt;
      &lt;/output&gt;
    &lt;/root&gt;
  Must have one or more &lt;output&gt; nodes.
  Each &lt;output&gt; node must have one or more &lt;input&gt; nodes and a
       single optional &lt;resource&gt; node.
  Attribute 'path' is optional for &lt;output&gt; nodes; required for
       &lt;input&gt; and &lt;resource&gt; nodes.
  
Everything is case-insensitive unless otherwise noted.
If no OFILE specified, output sent to STDOUT.
If no IFILE and no XFILE, input comes from STDIN.
If input comes from STDIN, -JS or -CSS option must be specified.
Multiple IFILE files will be concatenated to the output.</value>
  </data>
  <data name="ResourceArgNeedsPath" xml:space="preserve">
    <value>-RES parameter must be followed by path to existing resource file</value>
  </data>
  <data name="ReadingResourceFile" xml:space="preserve">
    <value>Processing resource script...;;Processing resource script {0}...</value>
  </data>
  <data name="ResourceNoPathAttr" xml:space="preserve">
    <value>XML &lt;resource&gt; node missing required path attribute</value>
  </data>
  <data name="XmlResourceNotExist" xml:space="preserve">
    <value>XML &lt;resource&gt; file does not exist;;XML error: &lt;resource&gt; file '{0}' does not exist</value>
  </data>
  <data name="MultipleResourceArgs" xml:space="preserve">
    <value>Cannot specify multiple -RES arguments</value>
  </data>
  <data name="ResourceArgNeedsNoName" xml:space="preserve">
    <value>Resource file of type .JS must not specify an object name on the -RES:name switch.</value>
  </data>
  <data name="ResourceArgInvalidType" xml:space="preserve">
    <value>Invalid resource file type;;Invalid resource file type: {0}. Must be .JS, .RESX, or .RESOURCES.</value>
  </data>
  <data name="ResourceJSOneVar" xml:space="preserve">
    <value>Resource JS file must be a single var statement initializing a variable to an object literal</value>
  </data>
  <data name="OutputFileErrorSubCat" xml:space="preserve">
    <value>output file</value>
  </data>
  <data name="OutputGroupErrorSubCat" xml:space="preserve">
    <value>output group</value>
  </data>
  <data name="MemberInfoFunctionExpression" xml:space="preserve">
    <value>function expression</value>
  </data>
  <data name="FunctionInfoReferences" xml:space="preserve">
    <value>references;;{0} references</value>
  </data>
  <data name="FunctionTypeExpression" xml:space="preserve">
    <value>Function Expression</value>
  </data>
  <data name="MemberInfoSelfFuncExpr" xml:space="preserve">
    <value>self-reference</value>
  </data>
  <data name="ConflictingInputType" xml:space="preserve">
    <value>Conflicting input type switches or input file extensions (JS and CSS)</value>
  </data>
  <data name="UnknownInputType" xml:space="preserve">
    <value>Unknown input type. Please use either the -JS or -CSS switch.</value>
  </data>
  <data name="NoClobberError" xml:space="preserve">
    <value>File already exists. No output created.;;File already exists and clobber option is not set to true. Output not created: {0}</value>
  </data>
  <data name="MemberInfoWithField" xml:space="preserve">
    <value>object property</value>
  </data>
  <data name="MemberInfoWithPossibly" xml:space="preserve">
    <value>or outer;;[or {0}{1}]</value>
  </data>
  <data name="SavingsGzipMessage" xml:space="preserve">
    <value>;;Gzip of output approximately {0} bytes ({1}% compression)</value>
  </data>
  <data name="SavingsMessage" xml:space="preserve">
    <value>;;Original Size: {0} bytes; reduced size: {1} bytes ({2}% minification)</value>
  </data>
  <data name="SavingsOutputMessage" xml:space="preserve">
    <value>;;Output size: {0} bytes</value>
  </data>
  <data name="InvalidKillSwitchArg" xml:space="preserve">
    <value>Invalid kill switch value: must be a decimal number;;Invalid kill switch value: '{0}' must be a valid decimal number</value>
  </data>
</root>