// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CssUnitTest
{
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class BaseAccessor
    {

        protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;

        protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type)
        {
            m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
        }

        protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) :
            this(null, type)
        {
        }

        internal virtual object Target
        {
            get
            {
                return m_privateObject.Target;
            }
        }

        public override string ToString()
        {
            return this.Target.ToString();
        }

        public override bool Equals(object obj)
        {
            if (typeof(BaseAccessor).IsInstanceOfType(obj))
            {
                obj = ((BaseAccessor)(obj)).Target;
            }
            return this.Target.Equals(obj);
        }

        public override int GetHashCode()
        {
            return this.Target.GetHashCode();
        }
    }


    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_Ajax_Utilities_MainClassAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("AjaxMin", "Microsoft.Ajax.Utilities.MainClass");

        internal Microsoft_Ajax_Utilities_MainClassAccessor(object target) :
            base(target, m_privateType)
        {
        }

        internal bool m_headerWritten
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_headerWritten")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_headerWritten", value);
            }
        }

        internal global::Microsoft.Ajax.Utilities.ConsoleOutputMode m_outputMode
        {
            get
            {
                global::Microsoft.Ajax.Utilities.ConsoleOutputMode ret = ((global::Microsoft.Ajax.Utilities.ConsoleOutputMode)(m_privateObject.GetField("m_outputMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_outputMode", value);
            }
        }

        internal global::System.Text.Encoding m_encodingInput
        {
            get
            {
                global::System.Text.Encoding ret = ((global::System.Text.Encoding)(m_privateObject.GetField("m_encodingInput")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_encodingInput", value);
            }
        }

        internal global::System.Text.Encoding m_encodingOutput
        {
            get
            {
                global::System.Text.Encoding ret = ((global::System.Text.Encoding)(m_privateObject.GetField("m_encodingOutput")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_encodingOutput", value);
            }
        }

        internal uint m_warningLevel
        {
            get
            {
                uint ret = ((uint)(m_privateObject.GetField("m_warningLevel")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_warningLevel", value);
            }
        }

        internal bool m_catchAsLocal
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_catchAsLocal")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_catchAsLocal", value);
            }
        }

        internal bool m_echoInput
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_echoInput")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_echoInput", value);
            }
        }

        internal bool m_stripDebugStatements
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_stripDebugStatements")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_stripDebugStatements", value);
            }
        }

        internal bool m_hyperCrunch
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_hyperCrunch")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_hyperCrunch", value);
            }
        }

        internal bool m_keepLocalizationVars
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_keepLocalizationVars")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_keepLocalizationVars", value);
            }
        }

        internal bool m_prettyPrint
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_prettyPrint")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_prettyPrint", value);
            }
        }

        internal int m_indentSize
        {
            get
            {
                int ret = ((int)(m_privateObject.GetField("m_indentSize")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_indentSize", value);
            }
        }

        internal bool m_collapseToLiteral
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_collapseToLiteral")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_collapseToLiteral", value);
            }
        }

        internal bool m_macSafariQuirks
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_macSafariQuirks")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_macSafariQuirks", value);
            }
        }

        internal bool m_evalsAreSafe
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_evalsAreSafe")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_evalsAreSafe", value);
            }
        }

        internal bool m_analyze
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_analyze")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_analyze", value);
            }
        }

        internal string[] m_inputFiles
        {
            get
            {
                string[] ret = ((string[])(m_privateObject.GetField("m_inputFiles")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_inputFiles", value);
            }
        }

        internal string m_outputFile
        {
            get
            {
                string ret = ((string)(m_privateObject.GetField("m_outputFile")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_outputFile", value);
            }
        }

        internal bool m_errorsFound
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_errorsFound")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_errorsFound", value);
            }
        }

        internal bool m_terminateWithSemicolon
        {
            get
            {
                bool ret = ((bool)(m_privateObject.GetField("m_terminateWithSemicolon")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_terminateWithSemicolon", value);
            }
        }

        internal static int Main(string[] args)
        {
            object[] _args = new object[] {
                args};
            int ret = ((int)(m_privateType.InvokeStatic("Main", new System.Type[] {
                    typeof(string).MakeArrayType()}, _args)));
            return ret;
        }

        internal static object CreatePrivate(string[] args)
        {
            object[] _args = new object[] {
                args};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("AjaxMin", "Microsoft.Ajax.Utilities.MainClass", new System.Type[] {
                    typeof(string).MakeArrayType()}, _args);
            return priv_obj.Target;
        }

        internal int Run()
        {
            object[] args = new object[0];
            int ret = ((int)(m_privateObject.Invoke("Run", new System.Type[0], args)));
            return ret;
        }

        internal int ProcessFile(string sourceFileName, global::System.IO.TextWriter outputStream, ref bool lastEndedSemicolon)
        {
            object[] args = new object[] {
                sourceFileName,
                outputStream,
                lastEndedSemicolon};
            int ret = ((int)(m_privateObject.Invoke("ProcessFile", new System.Type[] {
                    typeof(string),
                    typeof(global::System.IO.TextWriter),
                    typeof(bool).MakeByRefType()}, args)));
            lastEndedSemicolon = ((bool)(args[2]));
            return ret;
        }

        internal void CreateReport(global::Microsoft.Ajax.Utilities.GlobalScope globalScope)
        {
            object[] args = new object[] {
                globalScope};
            m_privateObject.Invoke("CreateReport", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.GlobalScope)}, args);
        }

        internal global::Microsoft.Ajax.Utilities.ActivationObject[] GetAllFunctionScopes(global::Microsoft.Ajax.Utilities.GlobalScope globalScope)
        {
            object[] args = new object[] {
                globalScope};
            global::Microsoft.Ajax.Utilities.ActivationObject[] ret = ((global::Microsoft.Ajax.Utilities.ActivationObject[])(m_privateObject.Invoke("GetAllFunctionScopes", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.GlobalScope)}, args)));
            return ret;
        }

        internal void AddScopes(System.Collections.Generic.List<Microsoft.Ajax.Utilities.ActivationObject> list, global::Microsoft.Ajax.Utilities.ActivationObject parentScope)
        {
            object[] args = new object[] {
                list,
                parentScope};
            m_privateObject.Invoke("AddScopes", new System.Type[] {
                    typeof(System.Collections.Generic.List<Microsoft.Ajax.Utilities.ActivationObject>),
                    typeof(global::Microsoft.Ajax.Utilities.ActivationObject)}, args);
        }

        internal void WriteScopeReport(global::Microsoft.Ajax.Utilities.FunctionObject funcObj, global::Microsoft.Ajax.Utilities.ActivationObject scope)
        {
            object[] args = new object[] {
                funcObj,
                scope};
            m_privateObject.Invoke("WriteScopeReport", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.FunctionObject),
                    typeof(global::Microsoft.Ajax.Utilities.ActivationObject)}, args);
        }

        internal void WriteBlockHeader(global::Microsoft.Ajax.Utilities.BlockScope blockScope, string blockType)
        {
            object[] args = new object[] {
                blockScope,
                blockType};
            m_privateObject.Invoke("WriteBlockHeader", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.BlockScope),
                    typeof(string)}, args);
        }

        internal void WriteFunctionHeader(global::Microsoft.Ajax.Utilities.FunctionObject funcObj, bool isKnown)
        {
            object[] args = new object[] {
                funcObj,
                isKnown};
            m_privateObject.Invoke("WriteFunctionHeader", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.FunctionObject),
                    typeof(bool)}, args);
        }

        internal void WriteMemberReport(global::System.Reflection.MemberInfo memberInfo)
        {
            object[] args = new object[] {
                memberInfo};
            m_privateObject.Invoke("WriteMemberReport", new System.Type[] {
                    typeof(global::System.Reflection.MemberInfo)}, args);
        }

        internal void WriteUnrefedReport()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("WriteUnrefedReport", new System.Type[0], args);
        }

        internal void ProcessArgs(string[] args)
        {
            object[] _args = new object[] {
                args};
            m_privateObject.Invoke("ProcessArgs", new System.Type[] {
                    typeof(string).MakeArrayType()}, _args);
        }

        internal static void Usage(global::CssUnitTest.Microsoft_Ajax_Utilities_MainClass_UsageExceptionAccessor e)
        {
            object e_val_target = null;
            if ((e != null))
            {
                e_val_target = e.Target;
            }
            object[] args = new object[] {
                e_val_target};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("AjaxMin", "Microsoft.Ajax.Utilities.MainClass+UsageException");
            m_privateType.InvokeStatic("Usage", new System.Type[] {
                    target.ReferencedType}, args);
        }

        internal void WriteProgress()
        {
            object[] args = new object[0];
            m_privateObject.Invoke("WriteProgress", new System.Type[0], args);
        }

        internal void WriteProgress(string format, params object[] args)
        {
            object[] _args = new object[] {
                format,
                args};
            m_privateObject.Invoke("WriteProgress", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeArrayType()}, _args);
        }

        internal void WriteError(string format, params object[] args)
        {
            object[] _args = new object[] {
                format,
                args};
            m_privateObject.Invoke("WriteError", new System.Type[] {
                    typeof(string),
                    typeof(object).MakeArrayType()}, _args);
        }

        internal static string GetHeaderString()
        {
            object[] args = new object[0];
            string ret = ((string)(m_privateType.InvokeStatic("GetHeaderString", new System.Type[0], args)));
            return ret;
        }

        internal void OnCompilerError(global::Microsoft.Ajax.Utilities.JScriptException error)
        {
            object[] args = new object[] {
                error};
            m_privateObject.Invoke("OnCompilerError", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.JScriptException)}, args);
        }

        internal void OnUndefinedReference(global::Microsoft.Ajax.Utilities.UndefinedReferenceException ex)
        {
            object[] args = new object[] {
                ex};
            m_privateObject.Invoke("OnUndefinedReference", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.UndefinedReferenceException)}, args);
        }

        internal static string GetSeverityString(int severity)
        {
            object[] args = new object[] {
                severity};
            string ret = ((string)(m_privateType.InvokeStatic("GetSeverityString", new System.Type[] {
                    typeof(int)}, args)));
            return ret;
        }
    }
    [System.Diagnostics.DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
    internal class Microsoft_Ajax_Utilities_MainClass_UsageExceptionAccessor : BaseAccessor
    {

        protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("AjaxMin", "Microsoft.Ajax.Utilities.MainClass+UsageException");

        internal Microsoft_Ajax_Utilities_MainClass_UsageExceptionAccessor(object target) :
            base(target, m_privateType)
        {
        }

        internal global::Microsoft.Ajax.Utilities.ConsoleOutputMode m_outputMode
        {
            get
            {
                global::Microsoft.Ajax.Utilities.ConsoleOutputMode ret = ((global::Microsoft.Ajax.Utilities.ConsoleOutputMode)(m_privateObject.GetField("m_outputMode")));
                return ret;
            }
            set
            {
                m_privateObject.SetField("m_outputMode", value);
            }
        }

        internal global::Microsoft.Ajax.Utilities.ConsoleOutputMode OutputMode
        {
            get
            {
                global::Microsoft.Ajax.Utilities.ConsoleOutputMode ret = ((global::Microsoft.Ajax.Utilities.ConsoleOutputMode)(m_privateObject.GetProperty("OutputMode")));
                return ret;
            }
        }

        internal static global::System.Exception CreatePrivate(global::Microsoft.Ajax.Utilities.ConsoleOutputMode outputMode)
        {
            object[] args = new object[] {
                outputMode};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("AjaxMin", "Microsoft.Ajax.Utilities.MainClass+UsageException", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.ConsoleOutputMode)}, args);
            return ((global::System.Exception)(priv_obj.Target));
        }

        internal static global::System.Exception CreatePrivate(global::Microsoft.Ajax.Utilities.ConsoleOutputMode outputMode, string format, params object[] args)
        {
            object[] _args = new object[] {
                outputMode,
                format,
                args};
            Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("AjaxMin", "Microsoft.Ajax.Utilities.MainClass+UsageException", new System.Type[] {
                    typeof(global::Microsoft.Ajax.Utilities.ConsoleOutputMode),
                    typeof(string),
                    typeof(object).MakeArrayType()}, _args);
            return ((global::System.Exception)(priv_obj.Target));
        }
    }
}
